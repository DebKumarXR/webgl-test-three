{"mappings":"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","sources":["poc/simple.js","node_modules/three/examples/jsm/controls/TransformControls.js","node_modules/three/examples/jsm/geometries/DecalGeometry.js"],"sourcesContent":["import {\n\tWebGLRenderer,\n\tPCFSoftShadowMap,\n\tScene,\n\tDirectionalLight,\n\tAmbientLight,\n\tPerspectiveCamera,\n\tBoxGeometry,\n\tDoubleSide,\n\tFrontSide,\n\tMesh,\n\tBufferGeometry,\n\tMeshStandardMaterial,\n\tMeshBasicMaterial,\n\tSphereGeometry,\n\tMathUtils,\n\tCylinderGeometry,\n\tTorusGeometry,\n\tTorusKnotGeometry,\n\tBufferAttribute,\n} from 'three';\nimport * as THREE from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { DecalGeometry } from 'three/examples/jsm/geometries/DecalGeometry.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { MeshBVHVisualizer } from 'three-mesh-bvh';\nimport {\n\tBrush,\n\tEvaluator,\n\tEdgesHelper,\n\tTriangleSetHelper,\n\tlogTriangleDefinitions,\n\tGridMaterial,\n\tADDITION,\n\tSUBTRACTION,\n\tREVERSE_SUBTRACTION,\n\tINTERSECTION,\n\tDIFFERENCE,\n\tHOLLOW_INTERSECTION,\n\tHOLLOW_SUBTRACTION,\n} from '..';\n\nwindow.logTriangleDefinitions = logTriangleDefinitions;\n\nconst params = {\n\n\tbrush1Shape: 'box',\n\tbrush1Complexity: 1,\n\tbrush1Color: '#ffffff',\n\n\tbrush2Shape: 'sphere',\n\tbrush2Complexity: 1,\n\tbrush2Color: '#E91E63',\n\n\toperation: SUBTRACTION,\n\twireframe: false,\n\tdisplayBrushes: true,\n\tdisplayControls: true,\n\tshadows: false,\n\tvertexColors: false,\n\tflatShading: false,\n\tgridTexture: false,\n\tuseGroups: true,\n\n\tenableDebugTelemetry: true,\n\tdisplayIntersectionEdges: false,\n\tdisplayTriangleIntersections: false,\n\tdisplayBrush1BVH: false,\n\tdisplayBrush2BVH: false,\n\n\tminScale: 10,\n\tmaxScale: 20,\n\trotate: true,\n\tclear: function () {\n\t\tremoveDecal();\n\t}\n\n};\n\nlet renderer, camera, scene, gui, outputContainer;\nlet controls, transformControls;\nlet brush1, brush2;\nlet resultObject, wireframeResult, light, originalMaterial;\nlet edgesHelper, trisHelper;\nlet bvhHelper1, bvhHelper2;\nlet needsUpdate = true;\nlet csgEvaluator;\n// meshes\nlet hipGLTF;\nlet femurGLTF;\nlet hipMesh;\nlet femurMesh;\nconst materialMap = new Map();\n\n// decals\nlet decalMesh;\nlet raycaster;\nlet line;\n\nconst intersection = {\n\tintersects: false,\n\tpoint: new THREE.Vector3(),\n\tnormal: new THREE.Vector3()\n};\nconst mouse = new THREE.Vector2();\nconst intersects = [];\n\nconst textureLoader = new THREE.TextureLoader();\nconst decalDiffuse = textureLoader.load( '/textures/decal/decal-diffuse.png' );\ndecalDiffuse.colorSpace = THREE.SRGBColorSpace;\nconst decalNormal = textureLoader.load( '/textures/decal/decal-normal.jpg' );\n\nconst decalMaterial = new THREE.MeshPhongMaterial( {\n\tspecular: 0x444444,\n\tmap: decalDiffuse,\n\tnormalMap: decalNormal,\n\tnormalScale: new THREE.Vector2( 1, 1 ),\n\tshininess: 30,\n\ttransparent: true,\n\tdepthTest: true,\n\tdepthWrite: false,\n\tpolygonOffset: true,\n\tpolygonOffsetFactor: - 4,\n\twireframe: false\n} );\n\nconst decals = [];\nlet mouseHelper;\nconst position = new THREE.Vector3();\nconst orientation = new THREE.Euler();\nconst size = new THREE.Vector3( 10, 10, 10 );\n\ninit();\n\nasync function init() {\n\n\tconst bgColor = 0x111111;\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// renderer setup\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setAnimationLoop( animate );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = PCFSoftShadowMap;\n\tdocument.body.appendChild( renderer.domElement );\n\t\n\t// scene setup\n\tscene = new Scene();\n\n\t// lights\n\tlight = new DirectionalLight( 0xffffff, 3.5 );\n\tlight.position.set( -20, 2, 3 );\n\tscene.add( light, light.target );\n\tscene.add( new AmbientLight( 0xb0bec5, 0.35 ) );\n\n\t// shadows\n\tconst shadowCam = light.shadow.camera;\n\tlight.castShadow = false;\n\tlight.shadow.mapSize.setScalar( 2048 );\n\tlight.shadow.bias = 1e-5;\n\tlight.shadow.normalBias = 1e-2;\n\n\tshadowCam.left = shadowCam.bottom = - 2.5;\n\tshadowCam.right = shadowCam.top = 2.5;\n\tshadowCam.updateProjectionMatrix();\n\n\t// camera setup\n\tcamera = new PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( -10, 0, 4 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\ttransformControls = new TransformControls( camera, renderer.domElement );\n\ttransformControls.setSize( 0.75 );\n\ttransformControls.addEventListener( 'dragging-changed', e => {\n\n\t\tcontrols.enabled = ! e.value;\n\n\t} );\n\ttransformControls.addEventListener( 'objectChange', () => {\n\n\t\tneedsUpdate = true;\n\n\t} );\n\tscene.add( transformControls );\n\n\n\t\n\t// bunny mesh has no UVs so skip that attribute\n\tcsgEvaluator = new Evaluator();\n\tcsgEvaluator.attributes = [ 'position', 'normal' ];\n\n\t// initialize brushes\n\tbrush1 = new Brush( new BoxGeometry(), new GridMaterial() );\n\tbrush2 = new Brush( new BoxGeometry(), new GridMaterial() );\n\t//brush2.position.set( - 0.75, 0.75, 0 );\n\tbrush2.scale.setScalar( 0.5 );\n\tbrush1.scale.setScalar( 0.5 );\n\n\tupdateBrush( brush1, params.brush1Shape, params.brush1Complexity );\n\tupdateBrush( brush2, params.brush2Shape, params.brush2Complexity );\n\n\t// initialize materials\n\tbrush1.material.opacity = 0.15;\n\tbrush1.material.transparent = true;\n\tbrush1.material.depthWrite = false;\n\tbrush1.material.polygonOffset = true;\n\tbrush1.material.polygonOffsetFactor = 0.2;\n\tbrush1.material.polygonOffsetUnits = 0.2;\n\tbrush1.material.side = DoubleSide;\n\tbrush1.material.premultipliedAlpha = true;\n\n\tbrush2.material.opacity = 0.15;\n\tbrush2.material.transparent = true;\n\tbrush2.material.depthWrite = false;\n\tbrush2.material.polygonOffset = true;\n\tbrush2.material.polygonOffsetFactor = 0.2;\n\tbrush2.material.polygonOffsetUnits = 0.2;\n\tbrush2.material.side = DoubleSide;\n\tbrush2.material.premultipliedAlpha = true;\n\tbrush2.material.roughness = 0.25;\n\tbrush2.material.color.set( 0xE91E63 );\n\n\tbrush1.receiveShadow = true;\n\tbrush2.receiveShadow = true;\n\ttransformControls.attach( brush2 );\n\n\tscene.add( brush1, brush2 );\n\n\t// create material map for transparent to opaque variants\n\tlet mat;\n\tmat = brush1.material.clone();\n\tmat.side = FrontSide;\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( brush1.material, mat );\n\n\tmat = brush2.material.clone();\n\tmat.side = FrontSide;\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( brush2.material, mat );\n\n\tmaterialMap.forEach( ( m1, m2 ) => {\n\n\t\tm1.enableGrid = params.gridTexture;\n\t\tm2.enableGrid = params.gridTexture;\n\n\t} );\n\n\t// add object displaying the result\n\tresultObject = new Mesh( new BufferGeometry(), new MeshStandardMaterial( {\n\t\tflatShading: false,\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetUnits: 0.1,\n\t\tpolygonOffsetFactor: 0.1,\n\t} ) );\n\tresultObject.castShadow = true;\n\tresultObject.receiveShadow = true;\n\toriginalMaterial = resultObject.material;\n\tscene.add( resultObject );\n\n\t// add wireframe representation\n\twireframeResult = new Mesh( resultObject.geometry, new MeshBasicMaterial( {\n\t\twireframe: true,\n\t\tcolor: 0,\n\t\topacity: 0.15,\n\t\ttransparent: true,\n\t} ) );\n\tscene.add( wireframeResult );\n\n\t// helpers\n\tedgesHelper = new EdgesHelper();\n\tedgesHelper.color.set( 0xE91E63 );\n\tscene.add( edgesHelper );\n\n\ttrisHelper = new TriangleSetHelper();\n\ttrisHelper.color.set( 0x00BCD4 );\n\tscene.add( trisHelper );\n\n\tbvhHelper1 = new MeshBVHVisualizer( brush1, 20 );\n\tbvhHelper2 = new MeshBVHVisualizer( brush2, 20 );\n\tscene.add( bvhHelper1, bvhHelper2 );\n\n\tbvhHelper1.update();\n\tbvhHelper2.update();\n\n\t// load hip geometry\n\thipGLTF = await new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://debkumarxr.github.io/webgl-test-three/poc/mesh/hip_MQ.glb' );\n\n\thipMesh = hipGLTF.scene.children[ 0 ].geometry;\n\thipMesh.computeVertexNormals();\n\n\n\t//load femur geometry\n\tfemurGLTF = await new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://debkumarxr.github.io/webgl-test-three/poc/mesh/femur_MQ.glb' );\n\n\tfemurMesh = femurGLTF.scene.children[ 0 ].geometry;\n\tfemurMesh.computeVertexNormals();\n\n\t// gui\n\tgui = new GUI();\n\tgui.add( params, 'operation', { ADDITION, SUBTRACTION, REVERSE_SUBTRACTION, INTERSECTION, DIFFERENCE, HOLLOW_INTERSECTION, HOLLOW_SUBTRACTION } ).onChange( v => {\n\n\t\tneedsUpdate = true;\n\n\t\tif ( v === HOLLOW_INTERSECTION || v === HOLLOW_SUBTRACTION ) {\n\n\t\t\tmaterialMap.forEach( m => m.side = DoubleSide );\n\n\t\t} else {\n\n\t\t\tmaterialMap.forEach( m => m.side = FrontSide );\n\n\t\t}\n\n\t} );\n\tgui.add( params, 'displayBrushes' );\n\tgui.add( params, 'displayControls' );\n\tgui.add( params, 'shadows' );\n\tgui.add( params, 'useGroups' ).onChange( () => needsUpdate = true );\n\tgui.add( params, 'vertexColors' ).onChange( v => {\n\n\t\tbrush1.material.vertexColors = v;\n\t\tbrush1.material.needsUpdate = true;\n\n\t\tbrush2.material.vertexColors = v;\n\t\tbrush2.material.needsUpdate = true;\n\n\t\tmaterialMap.forEach( m => {\n\n\t\t\tm.vertexColors = v;\n\t\t\tm.needsUpdate = true;\n\n\t\t} );\n\n\t\tcsgEvaluator.attributes = v ?\n\t\t\t[ 'color', 'position', 'normal' ] :\n\t\t\t[ 'position', 'normal' ];\n\n\t\tneedsUpdate = true;\n\n\t} );\n\tgui.add( params, 'gridTexture' ).onChange( v => {\n\n\t\tmaterialMap.forEach( ( m1, m2 ) => {\n\n\t\t\tm1.enableGrid = v;\n\t\t\tm2.enableGrid = v;\n\n\t\t} );\n\n\t} );\n\tgui.add( params, 'flatShading' ).onChange( v => {\n\n\t\tbrush1.material.flatShading = v;\n\t\tbrush1.material.needsUpdate = true;\n\n\t\tbrush2.material.flatShading = v;\n\t\tbrush2.material.needsUpdate = true;\n\n\t\tmaterialMap.forEach( m => {\n\n\t\t\tm.flatShading = v;\n\t\t\tm.needsUpdate = true;\n\n\t\t} );\n\n\t} );\n\n\tconst brush1Folder = gui.addFolder( 'brush 1' );\n\tbrush1Folder.add( params, 'brush1Shape', [ 'sphere', 'box', 'cylinder', 'torus', 'torus knot', 'mesh' ] ).name( 'shape' ).onChange( v => {\n\n\t\tupdateBrush( brush1, v, params.brush1Complexity, hipMesh );\n\t\tbvhHelper1.update();\n\n\t} );\n\tbrush1Folder.add( params, 'brush1Complexity', 0, 2 ).name( 'complexity' ).onChange( v => {\n\n\t\tupdateBrush( brush1, params.brush1Shape, v, hipMesh);\n\t\tbvhHelper1.update();\n\n\t} );\n\tbrush1Folder.addColor( params, 'brush1Color' ).onChange( v => {\n\n\t\tbrush1.material.color.set( v );\n\t\tmaterialMap.get( brush1.material ).color.set( v );\n\n\t} );\n\n\tconst brush2Folder = gui.addFolder( 'brush 2' );\n\tbrush2Folder.add( params, 'brush2Shape', [ 'sphere', 'box', 'cylinder', 'torus', 'torus knot', 'mesh' ] ).name( 'shape' ).onChange( v => {\n\n\t\tupdateBrush( brush2, v, params.brush2Complexity, femurMesh );\n\t\tbvhHelper2.update();\n\n\t} );\n\tbrush2Folder.add( params, 'brush2Complexity', 0, 2 ).name( 'complexity' ).onChange( v => {\n\n\t\tupdateBrush( brush2, params.brush2Shape, v, femurMesh );\n\t\tbvhHelper2.update();\n\n\t} );\n\tbrush2Folder.addColor( params, 'brush2Color' ).onChange( v => {\n\n\t\tbrush2.material.color.set( v );\n\t\tmaterialMap.get( brush2.material ).color.set( v );\n\n\t} );\n\n\tconst debugFolder = gui.addFolder( 'debug' );\n\tdebugFolder.add( params, 'enableDebugTelemetry' ).onChange( () => needsUpdate = true );\n\tdebugFolder.add( params, 'displayIntersectionEdges' );\n\tdebugFolder.add( params, 'displayTriangleIntersections' );\n\tdebugFolder.add( params, 'wireframe' );\n\tdebugFolder.add( params, 'displayBrush1BVH' );\n\tdebugFolder.add( params, 'displayBrush2BVH' );\n\n\t// default rotate\n\ttransformControls.setMode( 'rotate' );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\twindow.addEventListener( 'keydown', function ( e ) {\n\n\t\tswitch ( e.code ) {\n\n\t\t\tcase 'KeyW':\n\t\t\t\ttransformControls.setMode( 'translate' );\n\t\t\t\tbreak;\n\t\t\tcase 'KeyE':\n\t\t\t\ttransformControls.setMode( 'rotate' );\n\t\t\t\tbreak;\n\t\t\tcase 'KeyR':\n\t\t\t\ttransformControls.setMode( 'scale' );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n\tgui.add( params, 'minScale', 1, 30 );\n\tgui.add( params, 'maxScale', 1, 30 );\n\tgui.add( params, 'rotate' );\n\tgui.add( params, 'clear' );\n\tinitDecal();\n\n\trender();\n\n}\n\nfunction updateBrush( brush, type, complexity, mesh ) {\n\n\tbrush.geometry.dispose();\n\tswitch ( type ) {\n\n\t\tcase 'sphere':\n\t\t\tbrush.geometry = new SphereGeometry(\n\t\t\t\t1,\n\t\t\t\tMath.round( MathUtils.lerp( 5, 32, complexity ) ),\n\t\t\t\tMath.round( MathUtils.lerp( 5, 16, complexity ) )\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'box':\n\t\t\tconst dim = Math.round( MathUtils.lerp( 1, 10, complexity ) );\n\t\t\tbrush.geometry = new BoxGeometry( 1, 1, 1, dim, dim, dim );\n\t\t\tbreak;\n\t\tcase 'cylinder':\n\t\t\tbrush.geometry = new CylinderGeometry(\n\t\t\t\t0.5, 0.5, 1,\n\t\t\t\tMath.round( MathUtils.lerp( 5, 32, complexity ) ),\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'torus':\n\t\t\tbrush.geometry = new TorusGeometry(\n\t\t\t\t0.6,\n\t\t\t\t0.2,\n\t\t\t\tMath.round( MathUtils.lerp( 4, 16, complexity ) ),\n\t\t\t\tMath.round( MathUtils.lerp( 6, 30, complexity ) )\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'torus knot':\n\t\t\tbrush.geometry = new TorusKnotGeometry(\n\t\t\t\t0.6,\n\t\t\t\t0.2,\n\t\t\t\tMath.round( MathUtils.lerp( 16, 64, complexity ) ),\n\t\t\t\tMath.round( MathUtils.lerp( 4, 16, complexity ) ),\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'mesh':\n\t\t\tbrush.geometry = mesh.clone();\n\t\t\tbreak;\n\n\t}\n\n\tbrush.geometry = brush.geometry.toNonIndexed();\n\n\tconst position = brush.geometry.attributes.position;\n\tconst array = new Float32Array( position.count * 3 );\n\tfor ( let i = 0, l = array.length; i < l; i += 9 ) {\n\n\t\tarray[ i + 0 ] = 1;\n\t\tarray[ i + 1 ] = 0;\n\t\tarray[ i + 2 ] = 0;\n\n\t\tarray[ i + 3 ] = 0;\n\t\tarray[ i + 4 ] = 1;\n\t\tarray[ i + 5 ] = 0;\n\n\t\tarray[ i + 6 ] = 0;\n\t\tarray[ i + 7 ] = 0;\n\t\tarray[ i + 8 ] = 1;\n\n\t}\n\n\tbrush.geometry.setAttribute( 'color', new BufferAttribute( array, 3 ) );\n\tbrush.prepareGeometry();\n\tneedsUpdate = true;\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\t//brush2.scale.x = Math.max( brush2.scale.x, 0.01 );\n\t//brush2.scale.y = Math.max( brush2.scale.y, 0.01 );\n\t//brush2.scale.z = Math.max( brush2.scale.z, 0.01 );\n\n\tconst enableDebugTelemetry = params.enableDebugTelemetry;\n\tif ( needsUpdate ) {\n\n\t\tneedsUpdate = false;\n\n\t\tbrush1.updateMatrixWorld();\n\t\tbrush2.updateMatrixWorld();\n\n\t\tconst startTime = window.performance.now();\n\t\tcsgEvaluator.debug.enabled = enableDebugTelemetry;\n\t\tcsgEvaluator.useGroups = params.useGroups;\n\t\tcsgEvaluator.evaluate( brush1, brush2, params.operation, resultObject );\n\n\t\tif ( params.useGroups ) {\n\n\t\t\tresultObject.material = resultObject.material.map( m => materialMap.get( m ) );\n\n\t\t} else {\n\n\t\t\tresultObject.material = originalMaterial;\n\n\t\t}\n\n\t\tconst deltaTime = window.performance.now() - startTime;\n\t\toutputContainer.innerText = `${ deltaTime.toFixed( 3 ) }ms`;\n\n\t\tif ( enableDebugTelemetry ) {\n\n\t\t\tedgesHelper.setEdges( csgEvaluator.debug.intersectionEdges );\n\n\t\t\ttrisHelper.setTriangles( [\n\t\t\t\t...csgEvaluator.debug.triangleIntersectsA.getTrianglesAsArray(),\n\t\t\t\t...csgEvaluator.debug.triangleIntersectsA.getIntersectionsAsArray()\n\t\t\t] );\n\n\t\t}\n\t\t// // get vertex positions of hip mesh\n\t\t// if ( testMesh === undefined ) return;\n\t\t// const positionsHip = testMesh.geometry.attributes.position;\n\t\t// //convert object to world space\n\t\t// positionsHip.applyMatrix4( testMesh.matrixWorld );\n\t\t// //print vertex positions\n\t\t// console.log( 'hip mesh vertex positions:', positionsHip.array );\n\n\t\t// for ( let i = 0; i < 5; i++ ) {\n\t\t// \tconst position = new THREE.Vector3().fromBufferAttribute( positionsHip, i );\n\t\t// \t// add decal at position\n\t\t// \taddDecal( position );\n\t\t// }\n\n\t\t// const positions = resultObject.geometry.attributes.position;\n\t\t// //convert object to world space\n\t\t// positions.applyMatrix4( resultObject.matrixWorld );\n\t\t// //print vertex positions\n\t\t// console.log( 'result object vertex positions:', positions.array );\n\n\t\t// // add decals for 5 vertices positions\n\t\t// for ( let i = 0; i < 5; i++ ) {\n\t\t// \tconst position = new THREE.Vector3().fromBufferAttribute( positions, i );\n\t\t// \t// add decal at position\n\t\t// \taddDecal( position );\n\t\t// }\n\n\t}\n\n\t// window.CSG_DEBUG = csgEvaluator.debug;\n\t// if ( window.TRI !== undefined ) {\n\n\t// \tconst v = Object.keys( csgEvaluator.debug.triangleIntersectsA.data )[ window.TRI ];\n\t// \tconst _matrix = new Matrix4();\n\t// \t_matrix\n\t// \t\t.copy( brush2.matrixWorld )\n\t// \t\t.invert()\n\t// \t\t.multiply( brush1.matrixWorld );\n\n\n\t// \t// This is the space that clipping happens in\n\t// \tconst tris = [\n\t// \t\t...csgEvaluator.debug.triangleIntersectsA.getTrianglesAsArray( v ),\n\t// \t\t...csgEvaluator.debug.triangleIntersectsA.getIntersectionsAsArray( v ),\n\t// \t].map( t => {\n\n\t// \t\tt = t.clone();\n\t// \t\tt.a.applyMatrix4( _matrix );\n\t// \t\tt.b.applyMatrix4( _matrix );\n\t// \t\tt.c.applyMatrix4( _matrix );\n\t// \t\treturn t;\n\n\t// \t} );\n\n\t// \ttrisHelper.setTriangles( [ ...tris ] );\n\t// \tlogTriangleDefinitions( ...tris );\n\n\t// }\n\n\twireframeResult.visible = params.wireframe;\n\tbrush1.visible = params.displayBrushes;\n\tbrush2.visible = params.displayBrushes;\n\n\tlight.castShadow = params.shadows;\n\n\ttransformControls.enabled = params.displayControls;\n\ttransformControls.visible = params.displayControls;\n\n\tedgesHelper.visible = enableDebugTelemetry && params.displayIntersectionEdges;\n\ttrisHelper.visible = enableDebugTelemetry && params.displayTriangleIntersections;\n\n\tbvhHelper1.visible = params.displayBrush1BVH;\n\tbvhHelper2.visible = params.displayBrush2BVH;\n\n\t//renderer.render( scene, camera );\n\n}\n\n// init decal\nfunction initDecal() {\n\t\n\tconst geometry = new THREE.BufferGeometry();\n\tgeometry.setFromPoints( [ new THREE.Vector3(), new THREE.Vector3() ] );\n\n\tline = new THREE.Line( geometry, new THREE.LineBasicMaterial() );\n\tscene.add( line );\n\n\tloadSourceMesh();\n\n\traycaster = new THREE.Raycaster();\n\n\tmouseHelper = new THREE.Mesh( new THREE.BoxGeometry( 1, 1, 10 ), new THREE.MeshNormalMaterial() );\n\tmouseHelper.visible = false;\n\tscene.add( mouseHelper );\n\n\twindow.addEventListener( 'resize', onWindowResize );\n\n\tlet moved = false;\n\n\tcontrols.addEventListener( 'change', function () {\n\n\t\tmoved = true;\n\n\t} );\n\n\twindow.addEventListener( 'pointerdown', function () {\n\n\t\tmoved = false;\n\n\t} );\n\n\twindow.addEventListener( 'pointerup', function ( event ) {\n\n\t\tif ( moved === false ) {\n\n\t\t\tcheckIntersection( event.clientX, event.clientY );\n\n\t\t\tif ( intersection.intersects ) addDecal();\n\n\t\t}\n\n\t} );\n\n\twindow.addEventListener( 'pointermove', onPointerMove );\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( event.isPrimary ) {\n\n\t\t\tcheckIntersection( event.clientX, event.clientY );\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( x, y ) {\n\n\tif ( decalMesh === undefined ) return;\n\n\tmouse.x = ( x / window.innerWidth ) * 2 - 1;\n\tmouse.y = - ( y / window.innerHeight ) * 2 + 1;\n\n\traycaster.setFromCamera( mouse, camera );\n\traycaster.intersectObject( decalMesh, false, intersects );\n\n\tif ( intersects.length > 0 ) {\n\n\t\tconst p = intersects[ 0 ].point;\n\t\tmouseHelper.position.copy( p );\n\t\tintersection.point.copy( p );\n\n\t\tconst normalMatrix = new THREE.Matrix3().getNormalMatrix( decalMesh.matrixWorld );\n\n\t\tconst n = intersects[ 0 ].face.normal.clone();\n\t\tn.applyNormalMatrix( normalMatrix );\n\t\tn.multiplyScalar( 10 );\n\t\tn.add( intersects[ 0 ].point );\n\n\t\tintersection.normal.copy( intersects[ 0 ].face.normal );\n\t\tmouseHelper.lookAt( n );\n\n\t\tconst positions = line.geometry.attributes.position;\n\t\tpositions.setXYZ( 0, p.x, p.y, p.z );\n\t\tpositions.setXYZ( 1, n.x, n.y, n.z );\n\t\tpositions.needsUpdate = true;\n\n\t\tintersection.intersects = true;\n\n\t\tintersects.length = 0;\n\n\t} else {\n\n\t\tintersection.intersects = false;\n\n\t}\n\n}\n// load glb source mesh\nasync function loadSourceMesh() {\n\t\n\tconst loader = new GLTFLoader();\n\n\tloader.load( '/mesh/hip.glb', function ( gltf ) {\n\n\t\tdecalMesh = gltf.scene.children[ 0 ];\n\t\tdecalMesh.material = new THREE.MeshPhongMaterial( {\n\t\t\tspecular: 0x111111,\n\t\t\tcolor: 0xaaaaaa,\t\t\t\n\t\t\tshininess: 25\n\t\t} );\n\n\t\tscene.add( decalMesh );\n\t\tdecalMesh.scale.multiplyScalar( 10 );\n\n\t\t// scle down to fit the hip mesh\n\t\tdecalMesh.scale.set( 0.5, 0.5, 0.5 );\n\n\t\t//change position to the hip mesh\n\t\tdecalMesh.position.set( 0, 10, 0 );\n\n\t} );\n\n}\n\n// function for adding decal on the hip mesh\nfunction addDecal() {\t\n\n\tposition.copy( intersection.point );\n\torientation.copy( mouseHelper.rotation );\n\n\tif ( params.rotate ) orientation.z = Math.random() * 2 * Math.PI;\n\n\tconst scale = params.minScale + Math.random() * ( params.maxScale - params.minScale );\n\tsize.set( scale, scale, scale );\n\n\tconst material = decalMaterial.clone();\n\tmaterial.color.setHex( Math.random() * 0xffffff );\n\n\tconst m = new THREE.Mesh( new DecalGeometry( decalMesh, position, orientation, size ), material );\n\tm.renderOrder = decals.length; // give decals a fixed render order\n\n\tdecals.push( m );\n\n\tdecalMesh.attach( m );\n\n\t// if(testMesh === undefined) return;\n\n\t// const orientation = new THREE.Euler( Math.PI / 2, 0, 0 ); // rotate decal to face up\n\t// const size = new THREE.Vector3( 5, 5, 5 ); // size of the decal\n\n\t// const material = decalMaterial.clone();\n\t// material.color.setHex( Math.random() * 0xffffff );\n\t// const m = new THREE.Mesh( new DecalGeometry( testMesh, position, orientation, size ), material );\n\t// m.renderOrder = decals.length; // give decals a fixed render order\n\n\t// decals.push( m );\n\t// testMesh.attach( m );\n}\n\n// remove decal from the hip mesh\nfunction removeDecal() {\n\tdecals.forEach( function ( d ) {\n\t\tdecalMesh.remove( d );\n\t} );\n\tdecals.length = 0;\n}\n\nfunction onWindowResize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n}\nfunction animate() {\n\n\trenderer.render( scene, camera );\n\n//\tstats.update();\n\n}\n\n\n","import {\n\tBoxGeometry,\n\tBufferGeometry,\n\tCylinderGeometry,\n\tDoubleSide,\n\tEuler,\n\tFloat32BufferAttribute,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOctahedronGeometry,\n\tPlaneGeometry,\n\tQuaternion,\n\tRaycaster,\n\tSphereGeometry,\n\tTorusGeometry,\n\tVector3\n} from 'three';\n\nconst _raycaster = new Raycaster();\n\nconst _tempVector = new Vector3();\nconst _tempVector2 = new Vector3();\nconst _tempQuaternion = new Quaternion();\nconst _unit = {\n\tX: new Vector3( 1, 0, 0 ),\n\tY: new Vector3( 0, 1, 0 ),\n\tZ: new Vector3( 0, 0, 1 )\n};\n\nconst _changeEvent = { type: 'change' };\nconst _mouseDownEvent = { type: 'mouseDown' };\nconst _mouseUpEvent = { type: 'mouseUp', mode: null };\nconst _objectChangeEvent = { type: 'objectChange' };\n\nclass TransformControls extends Object3D {\n\n\tconstructor( camera, domElement ) {\n\n\t\tsuper();\n\n\t\tif ( domElement === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.TransformControls: The second parameter \"domElement\" is now mandatory.' );\n\t\t\tdomElement = document;\n\n\t\t}\n\n\t\tthis.isTransformControls = true;\n\n\t\tthis.visible = false;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\tconst _gizmo = new TransformControlsGizmo();\n\t\tthis._gizmo = _gizmo;\n\t\tthis.add( _gizmo );\n\n\t\tconst _plane = new TransformControlsPlane();\n\t\tthis._plane = _plane;\n\t\tthis.add( _plane );\n\n\t\tconst scope = this;\n\n\t\t// Defined getter, setter and store for a property\n\t\tfunction defineProperty( propName, defaultValue ) {\n\n\t\t\tlet propValue = defaultValue;\n\n\t\t\tObject.defineProperty( scope, propName, {\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn propValue !== undefined ? propValue : defaultValue;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tif ( propValue !== value ) {\n\n\t\t\t\t\t\tpropValue = value;\n\t\t\t\t\t\t_plane[ propName ] = value;\n\t\t\t\t\t\t_gizmo[ propName ] = value;\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: propName + '-changed', value: value } );\n\t\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tscope[ propName ] = defaultValue;\n\t\t\t_plane[ propName ] = defaultValue;\n\t\t\t_gizmo[ propName ] = defaultValue;\n\n\t\t}\n\n\t\t// Define properties with getters/setter\n\t\t// Setting the defined property will automatically trigger change event\n\t\t// Defined properties are passed down to gizmo and plane\n\n\t\tdefineProperty( 'camera', camera );\n\t\tdefineProperty( 'object', undefined );\n\t\tdefineProperty( 'enabled', true );\n\t\tdefineProperty( 'axis', null );\n\t\tdefineProperty( 'mode', 'translate' );\n\t\tdefineProperty( 'translationSnap', null );\n\t\tdefineProperty( 'rotationSnap', null );\n\t\tdefineProperty( 'scaleSnap', null );\n\t\tdefineProperty( 'space', 'world' );\n\t\tdefineProperty( 'size', 1 );\n\t\tdefineProperty( 'dragging', false );\n\t\tdefineProperty( 'showX', true );\n\t\tdefineProperty( 'showY', true );\n\t\tdefineProperty( 'showZ', true );\n\n\t\t// Reusable utility variables\n\n\t\tconst worldPosition = new Vector3();\n\t\tconst worldPositionStart = new Vector3();\n\t\tconst worldQuaternion = new Quaternion();\n\t\tconst worldQuaternionStart = new Quaternion();\n\t\tconst cameraPosition = new Vector3();\n\t\tconst cameraQuaternion = new Quaternion();\n\t\tconst pointStart = new Vector3();\n\t\tconst pointEnd = new Vector3();\n\t\tconst rotationAxis = new Vector3();\n\t\tconst rotationAngle = 0;\n\t\tconst eye = new Vector3();\n\n\t\t// TODO: remove properties unused in plane and gizmo\n\n\t\tdefineProperty( 'worldPosition', worldPosition );\n\t\tdefineProperty( 'worldPositionStart', worldPositionStart );\n\t\tdefineProperty( 'worldQuaternion', worldQuaternion );\n\t\tdefineProperty( 'worldQuaternionStart', worldQuaternionStart );\n\t\tdefineProperty( 'cameraPosition', cameraPosition );\n\t\tdefineProperty( 'cameraQuaternion', cameraQuaternion );\n\t\tdefineProperty( 'pointStart', pointStart );\n\t\tdefineProperty( 'pointEnd', pointEnd );\n\t\tdefineProperty( 'rotationAxis', rotationAxis );\n\t\tdefineProperty( 'rotationAngle', rotationAngle );\n\t\tdefineProperty( 'eye', eye );\n\n\t\tthis._offset = new Vector3();\n\t\tthis._startNorm = new Vector3();\n\t\tthis._endNorm = new Vector3();\n\t\tthis._cameraScale = new Vector3();\n\n\t\tthis._parentPosition = new Vector3();\n\t\tthis._parentQuaternion = new Quaternion();\n\t\tthis._parentQuaternionInv = new Quaternion();\n\t\tthis._parentScale = new Vector3();\n\n\t\tthis._worldScaleStart = new Vector3();\n\t\tthis._worldQuaternionInv = new Quaternion();\n\t\tthis._worldScale = new Vector3();\n\n\t\tthis._positionStart = new Vector3();\n\t\tthis._quaternionStart = new Quaternion();\n\t\tthis._scaleStart = new Vector3();\n\n\t\tthis._getPointer = getPointer.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerHover = onPointerHover.bind( this );\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t}\n\n\t// updateMatrixWorld  updates key transformation variables\n\tupdateMatrixWorld() {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\tif ( this.object.parent === null ) {\n\n\t\t\t\tconsole.error( 'TransformControls: The attached 3D object must be a part of the scene graph.' );\n\n\t\t\t} else {\n\n\t\t\t\tthis.object.parent.matrixWorld.decompose( this._parentPosition, this._parentQuaternion, this._parentScale );\n\n\t\t\t}\n\n\t\t\tthis.object.matrixWorld.decompose( this.worldPosition, this.worldQuaternion, this._worldScale );\n\n\t\t\tthis._parentQuaternionInv.copy( this._parentQuaternion ).invert();\n\t\t\tthis._worldQuaternionInv.copy( this.worldQuaternion ).invert();\n\n\t\t}\n\n\t\tthis.camera.updateMatrixWorld();\n\t\tthis.camera.matrixWorld.decompose( this.cameraPosition, this.cameraQuaternion, this._cameraScale );\n\n\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\tthis.camera.getWorldDirection( this.eye ).negate();\n\n\t\t} else {\n\n\t\t\tthis.eye.copy( this.cameraPosition ).sub( this.worldPosition ).normalize();\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( this );\n\n\t}\n\n\tpointerHover( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst intersect = intersectObjectWithRay( this._gizmo.picker[ this.mode ], _raycaster );\n\n\t\tif ( intersect ) {\n\n\t\t\tthis.axis = intersect.object.name;\n\n\t\t} else {\n\n\t\t\tthis.axis = null;\n\n\t\t}\n\n\t}\n\n\tpointerDown( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true || pointer.button !== 0 ) return;\n\n\t\tif ( this.axis !== null ) {\n\n\t\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\t\tif ( planeIntersect ) {\n\n\t\t\t\tthis.object.updateMatrixWorld();\n\t\t\t\tthis.object.parent.updateMatrixWorld();\n\n\t\t\t\tthis._positionStart.copy( this.object.position );\n\t\t\t\tthis._quaternionStart.copy( this.object.quaternion );\n\t\t\t\tthis._scaleStart.copy( this.object.scale );\n\n\t\t\t\tthis.object.matrixWorld.decompose( this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart );\n\n\t\t\t\tthis.pointStart.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\t\t\t_mouseDownEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseDownEvent );\n\n\t\t}\n\n\t}\n\n\tpointerMove( pointer ) {\n\n\t\tconst axis = this.axis;\n\t\tconst mode = this.mode;\n\t\tconst object = this.object;\n\t\tlet space = this.space;\n\n\t\tif ( mode === 'scale' ) {\n\n\t\t\tspace = 'local';\n\n\t\t} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {\n\n\t\t\tspace = 'world';\n\n\t\t}\n\n\t\tif ( object === undefined || axis === null || this.dragging === false || pointer.button !== - 1 ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\tif ( ! planeIntersect ) return;\n\n\t\tthis.pointEnd.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\tif ( mode === 'translate' ) {\n\n\t\t\t// Apply translate\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t}\n\n\t\t\tif ( axis.indexOf( 'X' ) === - 1 ) this._offset.x = 0;\n\t\t\tif ( axis.indexOf( 'Y' ) === - 1 ) this._offset.y = 0;\n\t\t\tif ( axis.indexOf( 'Z' ) === - 1 ) this._offset.z = 0;\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._quaternionStart ).divide( this._parentScale );\n\n\t\t\t} else {\n\n\t\t\t\tthis._offset.applyQuaternion( this._parentQuaternionInv ).divide( this._parentScale );\n\n\t\t\t}\n\n\t\t\tobject.position.copy( this._offset ).add( this._positionStart );\n\n\t\t\t// Apply translation snap\n\n\t\t\tif ( this.translationSnap ) {\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\tobject.position.applyQuaternion( _tempQuaternion.copy( this._quaternionStart ).invert() );\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.position.applyQuaternion( this._quaternionStart );\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'world' ) {\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'scale' ) {\n\n\t\t\tif ( axis.search( 'XYZ' ) !== - 1 ) {\n\n\t\t\t\tlet d = this.pointEnd.length() / this.pointStart.length();\n\n\t\t\t\tif ( this.pointEnd.dot( this.pointStart ) < 0 ) d *= - 1;\n\n\t\t\t\t_tempVector2.set( d, d, d );\n\n\t\t\t} else {\n\n\t\t\t\t_tempVector.copy( this.pointStart );\n\t\t\t\t_tempVector2.copy( this.pointEnd );\n\n\t\t\t\t_tempVector.applyQuaternion( this._worldQuaternionInv );\n\t\t\t\t_tempVector2.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t\t_tempVector2.divide( _tempVector );\n\n\t\t\t\tif ( axis.search( 'X' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.x = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.y = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.z = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply scale\n\n\t\t\tobject.scale.copy( this._scaleStart ).multiply( _tempVector2 );\n\n\t\t\tif ( this.scaleSnap ) {\n\n\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.x = Math.round( object.scale.x / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.y = Math.round( object.scale.y / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.z = Math.round( object.scale.z / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'rotate' ) {\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tconst ROTATION_SPEED = 20 / this.worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );\n\n\t\t\tif ( axis === 'E' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this.eye );\n\t\t\t\tthis.rotationAngle = this.pointEnd.angleTo( this.pointStart );\n\n\t\t\t\tthis._startNorm.copy( this.pointStart ).normalize();\n\t\t\t\tthis._endNorm.copy( this.pointEnd ).normalize();\n\n\t\t\t\tthis.rotationAngle *= ( this._endNorm.cross( this._startNorm ).dot( this.eye ) < 0 ? 1 : - 1 );\n\n\t\t\t} else if ( axis === 'XYZE' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this._offset ).cross( this.eye ).normalize();\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.copy( this.rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;\n\n\t\t\t} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {\n\n\t\t\t\tthis.rotationAxis.copy( _unit[ axis ] );\n\n\t\t\t\t_tempVector.copy( _unit[ axis ] );\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.cross( this.eye ).normalize() ) * ROTATION_SPEED;\n\n\t\t\t}\n\n\t\t\t// Apply rotation snap\n\n\t\t\tif ( this.rotationSnap ) this.rotationAngle = Math.round( this.rotationAngle / this.rotationSnap ) * this.rotationSnap;\n\n\t\t\t// Apply rotate\n\t\t\tif ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {\n\n\t\t\t\tobject.quaternion.copy( this._quaternionStart );\n\t\t\t\tobject.quaternion.multiply( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\tthis.rotationAxis.applyQuaternion( this._parentQuaternionInv );\n\t\t\t\tobject.quaternion.copy( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) );\n\t\t\t\tobject.quaternion.multiply( this._quaternionStart ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( _changeEvent );\n\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t}\n\n\tpointerUp( pointer ) {\n\n\t\tif ( pointer.button !== 0 ) return;\n\n\t\tif ( this.dragging && ( this.axis !== null ) ) {\n\n\t\t\t_mouseUpEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseUpEvent );\n\n\t\t}\n\n\t\tthis.dragging = false;\n\t\tthis.axis = null;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\tthis.traverse( function ( child ) {\n\n\t\t\tif ( child.geometry ) child.geometry.dispose();\n\t\t\tif ( child.material ) child.material.dispose();\n\n\t\t} );\n\n\t}\n\n\t// Set current object\n\tattach( object ) {\n\n\t\tthis.object = object;\n\t\tthis.visible = true;\n\n\t\treturn this;\n\n\t}\n\n\t// Detach from object\n\tdetach() {\n\n\t\tthis.object = undefined;\n\t\tthis.visible = false;\n\t\tthis.axis = null;\n\n\t\treturn this;\n\n\t}\n\n\treset() {\n\n\t\tif ( ! this.enabled ) return;\n\n\t\tif ( this.dragging ) {\n\n\t\t\tthis.object.position.copy( this._positionStart );\n\t\t\tthis.object.quaternion.copy( this._quaternionStart );\n\t\t\tthis.object.scale.copy( this._scaleStart );\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t\t\tthis.pointStart.copy( this.pointEnd );\n\n\t\t}\n\n\t}\n\n\tgetRaycaster() {\n\n\t\treturn _raycaster;\n\n\t}\n\n\t// TODO: deprecate\n\n\tgetMode() {\n\n\t\treturn this.mode;\n\n\t}\n\n\tsetMode( mode ) {\n\n\t\tthis.mode = mode;\n\n\t}\n\n\tsetTranslationSnap( translationSnap ) {\n\n\t\tthis.translationSnap = translationSnap;\n\n\t}\n\n\tsetRotationSnap( rotationSnap ) {\n\n\t\tthis.rotationSnap = rotationSnap;\n\n\t}\n\n\tsetScaleSnap( scaleSnap ) {\n\n\t\tthis.scaleSnap = scaleSnap;\n\n\t}\n\n\tsetSize( size ) {\n\n\t\tthis.size = size;\n\n\t}\n\n\tsetSpace( space ) {\n\n\t\tthis.space = space;\n\n\t}\n\n}\n\n// mouse / touch event handlers\n\nfunction getPointer( event ) {\n\n\tif ( this.domElement.ownerDocument.pointerLockElement ) {\n\n\t\treturn {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tbutton: event.button\n\t\t};\n\n\t} else {\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\tx: ( event.clientX - rect.left ) / rect.width * 2 - 1,\n\t\t\ty: - ( event.clientY - rect.top ) / rect.height * 2 + 1,\n\t\t\tbutton: event.button\n\t\t};\n\n\t}\n\n}\n\nfunction onPointerHover( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tswitch ( event.pointerType ) {\n\n\t\tcase 'mouse':\n\t\tcase 'pen':\n\t\t\tthis.pointerHover( this._getPointer( event ) );\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tif ( ! document.pointerLockElement ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t}\n\n\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerHover( this._getPointer( event ) );\n\tthis.pointerDown( this._getPointer( event ) );\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.pointerMove( this._getPointer( event ) );\n\n}\n\nfunction onPointerUp( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerUp( this._getPointer( event ) );\n\n}\n\nfunction intersectObjectWithRay( object, raycaster, includeInvisible ) {\n\n\tconst allIntersections = raycaster.intersectObject( object, true );\n\n\tfor ( let i = 0; i < allIntersections.length; i ++ ) {\n\n\t\tif ( allIntersections[ i ].object.visible || includeInvisible ) {\n\n\t\t\treturn allIntersections[ i ];\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\n//\n\n// Reusable utility variables\n\nconst _tempEuler = new Euler();\nconst _alignVector = new Vector3( 0, 1, 0 );\nconst _zeroVector = new Vector3( 0, 0, 0 );\nconst _lookAtMatrix = new Matrix4();\nconst _tempQuaternion2 = new Quaternion();\nconst _identityQuaternion = new Quaternion();\nconst _dirVector = new Vector3();\nconst _tempMatrix = new Matrix4();\n\nconst _unitX = new Vector3( 1, 0, 0 );\nconst _unitY = new Vector3( 0, 1, 0 );\nconst _unitZ = new Vector3( 0, 0, 1 );\n\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\n\nclass TransformControlsGizmo extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isTransformControlsGizmo = true;\n\n\t\tthis.type = 'TransformControlsGizmo';\n\n\t\t// shared materials\n\n\t\tconst gizmoMaterial = new MeshBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tconst gizmoLineMaterial = new LineBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t// Make unique material for each axis/color\n\n\t\tconst matInvisible = gizmoMaterial.clone();\n\t\tmatInvisible.opacity = 0.15;\n\n\t\tconst matHelper = gizmoLineMaterial.clone();\n\t\tmatHelper.opacity = 0.5;\n\n\t\tconst matRed = gizmoMaterial.clone();\n\t\tmatRed.color.setHex( 0xff0000 );\n\n\t\tconst matGreen = gizmoMaterial.clone();\n\t\tmatGreen.color.setHex( 0x00ff00 );\n\n\t\tconst matBlue = gizmoMaterial.clone();\n\t\tmatBlue.color.setHex( 0x0000ff );\n\n\t\tconst matRedTransparent = gizmoMaterial.clone();\n\t\tmatRedTransparent.color.setHex( 0xff0000 );\n\t\tmatRedTransparent.opacity = 0.5;\n\n\t\tconst matGreenTransparent = gizmoMaterial.clone();\n\t\tmatGreenTransparent.color.setHex( 0x00ff00 );\n\t\tmatGreenTransparent.opacity = 0.5;\n\n\t\tconst matBlueTransparent = gizmoMaterial.clone();\n\t\tmatBlueTransparent.color.setHex( 0x0000ff );\n\t\tmatBlueTransparent.opacity = 0.5;\n\n\t\tconst matWhiteTransparent = gizmoMaterial.clone();\n\t\tmatWhiteTransparent.opacity = 0.25;\n\n\t\tconst matYellowTransparent = gizmoMaterial.clone();\n\t\tmatYellowTransparent.color.setHex( 0xffff00 );\n\t\tmatYellowTransparent.opacity = 0.25;\n\n\t\tconst matYellow = gizmoMaterial.clone();\n\t\tmatYellow.color.setHex( 0xffff00 );\n\n\t\tconst matGray = gizmoMaterial.clone();\n\t\tmatGray.color.setHex( 0x787878 );\n\n\t\t// reusable geometry\n\n\t\tconst arrowGeometry = new CylinderGeometry( 0, 0.04, 0.1, 12 );\n\t\tarrowGeometry.translate( 0, 0.05, 0 );\n\n\t\tconst scaleHandleGeometry = new BoxGeometry( 0.08, 0.08, 0.08 );\n\t\tscaleHandleGeometry.translate( 0, 0.04, 0 );\n\n\t\tconst lineGeometry = new BufferGeometry();\n\t\tlineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,\t1, 0, 0 ], 3 ) );\n\n\t\tconst lineGeometry2 = new CylinderGeometry( 0.0075, 0.0075, 0.5, 3 );\n\t\tlineGeometry2.translate( 0, 0.25, 0 );\n\n\t\tfunction CircleGeometry( radius, arc ) {\n\n\t\t\tconst geometry = new TorusGeometry( radius, 0.0075, 3, 64, arc * Math.PI * 2 );\n\t\t\tgeometry.rotateY( Math.PI / 2 );\n\t\t\tgeometry.rotateX( Math.PI / 2 );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n\t\tfunction TranslateHelperGeometry() {\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n\t\tconst gizmoTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, - 0.5, 0 ], [ Math.PI, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), null, [ Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent.clone() ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.2, 0 ), matInvisible ) ]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperTranslate = {\n\t\t\tSTART: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tEND: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tDELTA: [\n\t\t\t\t[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 1 ), matGray ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matRed ) ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matGreen ), null, [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matBlue ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.75, 1 ), matYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperRotate = {\n\t\t\tAXIS: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( new SphereGeometry( 0.25, 10, 8 ), matInvisible ) ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.75, 0.1, 2, 24 ), matInvisible ) ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, - 0.5, 0 ], [ 0, 0, Math.PI ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.1, 0.1, 0.1 ), matWhiteTransparent.clone() ) ],\n\t\t\t]\n\t\t};\n\n\t\tconst pickerScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]],\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 0 ]],\n\t\t\t]\n\t\t};\n\n\t\tconst helperScale = {\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\t// Creates an Object3D with gizmos described in custom hierarchy definition.\n\n\t\tfunction setupGizmo( gizmoMap ) {\n\n\t\t\tconst gizmo = new Object3D();\n\n\t\t\tfor ( const name in gizmoMap ) {\n\n\t\t\t\tfor ( let i = gizmoMap[ name ].length; i --; ) {\n\n\t\t\t\t\tconst object = gizmoMap[ name ][ i ][ 0 ].clone();\n\t\t\t\t\tconst position = gizmoMap[ name ][ i ][ 1 ];\n\t\t\t\t\tconst rotation = gizmoMap[ name ][ i ][ 2 ];\n\t\t\t\t\tconst scale = gizmoMap[ name ][ i ][ 3 ];\n\t\t\t\t\tconst tag = gizmoMap[ name ][ i ][ 4 ];\n\n\t\t\t\t\t// name and tag properties are essential for picking and updating logic.\n\t\t\t\t\tobject.name = name;\n\t\t\t\t\tobject.tag = tag;\n\n\t\t\t\t\tif ( position ) {\n\n\t\t\t\t\t\tobject.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( rotation ) {\n\n\t\t\t\t\t\tobject.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scale ) {\n\n\t\t\t\t\t\tobject.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t\tconst tempGeometry = object.geometry.clone();\n\t\t\t\t\ttempGeometry.applyMatrix4( object.matrix );\n\t\t\t\t\tobject.geometry = tempGeometry;\n\t\t\t\t\tobject.renderOrder = Infinity;\n\n\t\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t\t\tobject.rotation.set( 0, 0, 0 );\n\t\t\t\t\tobject.scale.set( 1, 1, 1 );\n\n\t\t\t\t\tgizmo.add( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn gizmo;\n\n\t\t}\n\n\t\t// Gizmo creation\n\n\t\tthis.gizmo = {};\n\t\tthis.picker = {};\n\t\tthis.helper = {};\n\n\t\tthis.add( this.gizmo[ 'translate' ] = setupGizmo( gizmoTranslate ) );\n\t\tthis.add( this.gizmo[ 'rotate' ] = setupGizmo( gizmoRotate ) );\n\t\tthis.add( this.gizmo[ 'scale' ] = setupGizmo( gizmoScale ) );\n\t\tthis.add( this.picker[ 'translate' ] = setupGizmo( pickerTranslate ) );\n\t\tthis.add( this.picker[ 'rotate' ] = setupGizmo( pickerRotate ) );\n\t\tthis.add( this.picker[ 'scale' ] = setupGizmo( pickerScale ) );\n\t\tthis.add( this.helper[ 'translate' ] = setupGizmo( helperTranslate ) );\n\t\tthis.add( this.helper[ 'rotate' ] = setupGizmo( helperRotate ) );\n\t\tthis.add( this.helper[ 'scale' ] = setupGizmo( helperScale ) );\n\n\t\t// Pickers should be hidden always\n\n\t\tthis.picker[ 'translate' ].visible = false;\n\t\tthis.picker[ 'rotate' ].visible = false;\n\t\tthis.picker[ 'scale' ].visible = false;\n\n\t}\n\n\t// updateMatrixWorld will update transformations and appearance of individual handles\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst space = ( this.mode === 'scale' ) ? 'local' : this.space; // scale always oriented to local rotation\n\n\t\tconst quaternion = ( space === 'local' ) ? this.worldQuaternion : _identityQuaternion;\n\n\t\t// Show only gizmos for current transform mode\n\n\t\tthis.gizmo[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.gizmo[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.gizmo[ 'scale' ].visible = this.mode === 'scale';\n\n\t\tthis.helper[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.helper[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.helper[ 'scale' ].visible = this.mode === 'scale';\n\n\n\t\tlet handles = [];\n\t\thandles = handles.concat( this.picker[ this.mode ].children );\n\t\thandles = handles.concat( this.gizmo[ this.mode ].children );\n\t\thandles = handles.concat( this.helper[ this.mode ].children );\n\n\t\tfor ( let i = 0; i < handles.length; i ++ ) {\n\n\t\t\tconst handle = handles[ i ];\n\n\t\t\t// hide aligned to camera\n\n\t\t\thandle.visible = true;\n\t\t\thandle.rotation.set( 0, 0, 0 );\n\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\tlet factor;\n\n\t\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\t\tfactor = ( this.camera.top - this.camera.bottom ) / this.camera.zoom;\n\n\t\t\t} else {\n\n\t\t\t\tfactor = this.worldPosition.distanceTo( this.cameraPosition ) * Math.min( 1.9 * Math.tan( Math.PI * this.camera.fov / 360 ) / this.camera.zoom, 7 );\n\n\t\t\t}\n\n\t\t\thandle.scale.set( 1, 1, 1 ).multiplyScalar( factor * this.size / 4 );\n\n\t\t\t// TODO: simplify helpers and consider decoupling from gizmo\n\n\t\t\tif ( handle.tag === 'helper' ) {\n\n\t\t\t\thandle.visible = false;\n\n\t\t\t\tif ( handle.name === 'AXIS' ) {\n\n\t\t\t\t\thandle.visible = !! this.axis;\n\n\t\t\t\t\tif ( this.axis === 'X' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Y' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, Math.PI / 2 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Z' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'XYZE' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\t_alignVector.copy( this.rotationAxis );\n\t\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( _zeroVector, _alignVector, _unitY ) );\n\t\t\t\t\t\thandle.quaternion.multiply( _tempQuaternion );\n\t\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'E' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if ( handle.name === 'START' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'END' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPosition );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'DELTA' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.quaternion.copy( this.worldQuaternionStart );\n\t\t\t\t\t_tempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternionStart.clone().invert() );\n\t\t\t\t\thandle.scale.copy( _tempVector );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\t\t\tif ( this.dragging ) {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis ) {\n\n\t\t\t\t\t\thandle.visible = this.axis.search( handle.name ) !== - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If updating helper, skip rest of the loop\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Align handles to current local or world rotation\n\n\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\tif ( this.mode === 'translate' || this.mode === 'scale' ) {\n\n\t\t\t\t// Hide translate and scale axis facing the camera\n\n\t\t\t\tconst AXIS_HIDE_THRESHOLD = 0.99;\n\t\t\t\tconst PLANE_HIDE_THRESHOLD = 0.2;\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XY' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'YZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.mode === 'rotate' ) {\n\n\t\t\t\t// Align handles to current local or world rotation\n\n\t\t\t\t_tempQuaternion2.copy( quaternion );\n\t\t\t\t_alignVector.copy( this.eye ).applyQuaternion( _tempQuaternion.copy( quaternion ).invert() );\n\n\t\t\t\tif ( handle.name.search( 'E' ) !== - 1 ) {\n\n\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( this.eye, _zeroVector, _unitY ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitX, Math.atan2( - _alignVector.y, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitY, Math.atan2( _alignVector.x, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitZ, Math.atan2( _alignVector.y, _alignVector.x ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Hide disabled axes\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'X' ) === - 1 || this.showX );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Y' ) === - 1 || this.showY );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Z' ) === - 1 || this.showZ );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'E' ) === - 1 || ( this.showX && this.showY && this.showZ ) );\n\n\t\t\t// highlight selected axis\n\n\t\t\thandle.material._color = handle.material._color || handle.material.color.clone();\n\t\t\thandle.material._opacity = handle.material._opacity || handle.material.opacity;\n\n\t\t\thandle.material.color.copy( handle.material._color );\n\t\t\thandle.material.opacity = handle.material._opacity;\n\n\t\t\tif ( this.enabled && this.axis ) {\n\n\t\t\t\tif ( handle.name === this.axis ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t} else if ( this.axis.split( '' ).some( function ( a ) {\n\n\t\t\t\t\treturn handle.name === a;\n\n\t\t\t\t} ) ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\n//\n\nclass TransformControlsPlane extends Mesh {\n\n\tconstructor() {\n\n\t\tsuper(\n\t\t\tnew PlaneGeometry( 100000, 100000, 2, 2 ),\n\t\t\tnew MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false } )\n\t\t);\n\n\t\tthis.isTransformControlsPlane = true;\n\n\t\tthis.type = 'TransformControlsPlane';\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet space = this.space;\n\n\t\tthis.position.copy( this.worldPosition );\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\t_v1.copy( _unitX ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v2.copy( _unitY ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v3.copy( _unitZ ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\n\t\t// Align the plane for current transform mode, axis and space.\n\n\t\t_alignVector.copy( _v2 );\n\n\t\tswitch ( this.mode ) {\n\n\t\t\tcase 'translate':\n\t\t\tcase 'scale':\n\t\t\t\tswitch ( this.axis ) {\n\n\t\t\t\t\tcase 'X':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v1 );\n\t\t\t\t\t\t_dirVector.copy( _v1 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v2 );\n\t\t\t\t\t\t_dirVector.copy( _v2 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v3 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XY':\n\t\t\t\t\t\t_dirVector.copy( _v3 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YZ':\n\t\t\t\t\t\t_dirVector.copy( _v1 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XZ':\n\t\t\t\t\t\t_alignVector.copy( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v2 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XYZ':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\t_dirVector.set( 0, 0, 0 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\tdefault:\n\t\t\t\t// special case for rotate\n\t\t\t\t_dirVector.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( _dirVector.length() === 0 ) {\n\n\t\t\t// If in rotate mode, make the plane parallel to camera\n\t\t\tthis.quaternion.copy( this.cameraQuaternion );\n\n\t\t} else {\n\n\t\t\t_tempMatrix.lookAt( _tempVector.set( 0, 0, 0 ), _dirVector, _alignVector );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _tempMatrix );\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tMatrix4,\n\tVector3\n} from 'three';\n\n/**\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\n *\n * Constructor parameter:\n *\n * mesh — Any mesh object\n * position — Position of the decal projector\n * orientation — Orientation of the decal projector\n * size — Size of the decal projector\n *\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\n *\n */\n\nclass DecalGeometry extends BufferGeometry {\n\n\tconstructor( mesh, position, orientation, size ) {\n\n\t\tsuper();\n\n\t\t// buffers\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helpers\n\n\t\tconst plane = new Vector3();\n\n\t\t// this matrix represents the transformation of the decal projector\n\n\t\tconst projectorMatrix = new Matrix4();\n\t\tprojectorMatrix.makeRotationFromEuler( orientation );\n\t\tprojectorMatrix.setPosition( position );\n\n\t\tconst projectorMatrixInverse = new Matrix4();\n\t\tprojectorMatrixInverse.copy( projectorMatrix ).invert();\n\n\t\t// generate buffers\n\n\t\tgenerate();\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generate() {\n\n\t\t\tlet decalVertices = [];\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\n\t\t\t// handle different geometry types\n\n\t\t\tconst geometry = mesh.geometry;\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst normalAttribute = geometry.attributes.normal;\n\n\t\t\t// first, create an array of 'DecalVertex' objects\n\t\t\t// three consecutive 'DecalVertex' objects represent a single face\n\t\t\t//\n\t\t\t// this data structure will be later used to perform the clipping\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst index = geometry.index;\n\n\t\t\t\tfor ( let i = 0; i < index.count; i ++ ) {\n\n\t\t\t\t\tvertex.fromBufferAttribute( positionAttribute, index.getX( i ) );\n\t\t\t\t\tnormal.fromBufferAttribute( normalAttribute, index.getX( i ) );\n\n\t\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\t\t\tvertex.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\tnormal.fromBufferAttribute( normalAttribute, i );\n\n\t\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// second, clip the geometry so that it doesn't extend out from the projector\n\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 1, 0, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( - 1, 0, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 1, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, - 1, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, 1 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, - 1 ) );\n\n\t\t\t// third, generate final vertices, normals and uvs\n\n\t\t\tfor ( let i = 0; i < decalVertices.length; i ++ ) {\n\n\t\t\t\tconst decalVertex = decalVertices[ i ];\n\n\t\t\t\t// create texture coordinates (we are still in projector space)\n\n\t\t\t\tuvs.push(\n\t\t\t\t\t0.5 + ( decalVertex.position.x / size.x ),\n\t\t\t\t\t0.5 + ( decalVertex.position.y / size.y )\n\t\t\t\t);\n\n\t\t\t\t// transform the vertex back to world space\n\n\t\t\t\tdecalVertex.position.applyMatrix4( projectorMatrix );\n\n\t\t\t\t// now create vertex and normal buffer data\n\n\t\t\t\tvertices.push( decalVertex.position.x, decalVertex.position.y, decalVertex.position.z );\n\t\t\t\tnormals.push( decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushDecalVertex( decalVertices, vertex, normal ) {\n\n\t\t\t// transform the vertex to world space, then to projector space\n\n\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\t\t\tvertex.applyMatrix4( projectorMatrixInverse );\n\n\t\t\tnormal.transformDirection( mesh.matrixWorld );\n\n\t\t\tdecalVertices.push( new DecalVertex( vertex.clone(), normal.clone() ) );\n\n\t\t}\n\n\t\tfunction clipGeometry( inVertices, plane ) {\n\n\t\t\tconst outVertices = [];\n\n\t\t\tconst s = 0.5 * Math.abs( size.dot( plane ) );\n\n\t\t\t// a single iteration clips one face,\n\t\t\t// which consists of three consecutive 'DecalVertex' objects\n\n\t\t\tfor ( let i = 0; i < inVertices.length; i += 3 ) {\n\n\t\t\t\tlet total = 0;\n\t\t\t\tlet nV1;\n\t\t\t\tlet nV2;\n\t\t\t\tlet nV3;\n\t\t\t\tlet nV4;\n\n\t\t\t\tconst d1 = inVertices[ i + 0 ].position.dot( plane ) - s;\n\t\t\t\tconst d2 = inVertices[ i + 1 ].position.dot( plane ) - s;\n\t\t\t\tconst d3 = inVertices[ i + 2 ].position.dot( plane ) - s;\n\n\t\t\t\tconst v1Out = d1 > 0;\n\t\t\t\tconst v2Out = d2 > 0;\n\t\t\t\tconst v3Out = d3 > 0;\n\n\t\t\t\t// calculate, how many vertices of the face lie outside of the clipping plane\n\n\t\t\t\ttotal = ( v1Out ? 1 : 0 ) + ( v2Out ? 1 : 0 ) + ( v3Out ? 1 : 0 );\n\n\t\t\t\tswitch ( total ) {\n\n\t\t\t\t\tcase 0: {\n\n\t\t\t\t\t\t// the entire face lies inside of the plane, no clipping needed\n\n\t\t\t\t\t\toutVertices.push( inVertices[ i ] );\n\t\t\t\t\t\toutVertices.push( inVertices[ i + 1 ] );\n\t\t\t\t\t\toutVertices.push( inVertices[ i + 2 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 1: {\n\n\t\t\t\t\t\t// one vertex lies outside of the plane, perform clipping\n\n\t\t\t\t\t\tif ( v1Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 1 ];\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i ], nV1, plane, s );\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i ], nV2, plane, s );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( v2Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i ];\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i + 1 ], nV1, plane, s );\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i + 1 ], nV2, plane, s );\n\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\t\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\t\t\t\t\t\t\toutVertices.push( nV1.clone() );\n\n\t\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\t\t\t\t\t\t\toutVertices.push( nV3.clone() );\n\t\t\t\t\t\t\toutVertices.push( nV4 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( v3Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i ];\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 1 ];\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i + 2 ], nV1, plane, s );\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i + 2 ], nV2, plane, s );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutVertices.push( nV1.clone() );\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\toutVertices.push( nV4 );\n\t\t\t\t\t\toutVertices.push( nV3.clone() );\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 2: {\n\n\t\t\t\t\t\t// two vertices lies outside of the plane, perform clipping\n\n\t\t\t\t\t\tif ( ! v1Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i ].clone();\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 1 ], plane, s );\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 2 ], plane, s );\n\t\t\t\t\t\t\toutVertices.push( nV1 );\n\t\t\t\t\t\t\toutVertices.push( nV2 );\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! v2Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 1 ].clone();\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 2 ], plane, s );\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i ], plane, s );\n\t\t\t\t\t\t\toutVertices.push( nV1 );\n\t\t\t\t\t\t\toutVertices.push( nV2 );\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! v3Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 2 ].clone();\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i ], plane, s );\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 1 ], plane, s );\n\t\t\t\t\t\t\toutVertices.push( nV1 );\n\t\t\t\t\t\t\toutVertices.push( nV2 );\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 3: {\n\n\t\t\t\t\t\t// the entire face lies outside of the plane, so let's discard the corresponding vertices\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn outVertices;\n\n\t\t}\n\n\t\tfunction clip( v0, v1, p, s ) {\n\n\t\t\tconst d0 = v0.position.dot( p ) - s;\n\t\t\tconst d1 = v1.position.dot( p ) - s;\n\n\t\t\tconst s0 = d0 / ( d0 - d1 );\n\n\t\t\tconst v = new DecalVertex(\n\t\t\t\tnew Vector3(\n\t\t\t\t\tv0.position.x + s0 * ( v1.position.x - v0.position.x ),\n\t\t\t\t\tv0.position.y + s0 * ( v1.position.y - v0.position.y ),\n\t\t\t\t\tv0.position.z + s0 * ( v1.position.z - v0.position.z )\n\t\t\t\t),\n\t\t\t\tnew Vector3(\n\t\t\t\t\tv0.normal.x + s0 * ( v1.normal.x - v0.normal.x ),\n\t\t\t\t\tv0.normal.y + s0 * ( v1.normal.y - v0.normal.y ),\n\t\t\t\t\tv0.normal.z + s0 * ( v1.normal.z - v0.normal.z )\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// need to clip more values (texture coordinates)? do it this way:\n\t\t\t// intersectpoint.value = a.value + s * ( b.value - a.value );\n\n\t\t\treturn v;\n\n\t\t}\n\n\t}\n\n}\n\n// helper\n\nclass DecalVertex {\n\n\tconstructor( position, normal ) {\n\n\t\tthis.position = position;\n\t\tthis.normal = normal;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.position.clone(), this.normal.clone() );\n\n\t}\n\n}\n\nexport { DecalGeometry, DecalVertex };\n"],"names":["$ilwiq","parcelRequire","$b9499708d6cce9b7$var$_raycaster","Raycaster","$b9499708d6cce9b7$var$_tempVector","Vector3","$b9499708d6cce9b7$var$_tempVector2","$b9499708d6cce9b7$var$_tempQuaternion","Quaternion","$b9499708d6cce9b7$var$_unit","X","Y","Z","$b9499708d6cce9b7$var$_changeEvent","type","$b9499708d6cce9b7$var$_mouseDownEvent","$b9499708d6cce9b7$var$_mouseUpEvent","mode","$b9499708d6cce9b7$var$_objectChangeEvent","$b9499708d6cce9b7$export$198e80c116632110","Object3D","constructor","camera","domElement","super","undefined","console","warn","document","this","isTransformControls","visible","style","touchAction","_gizmo","$b9499708d6cce9b7$export$c2ae06a69fb9d31f","add","_plane","$b9499708d6cce9b7$export$c0ab73045548e2ca","scope","defineProperty","propName","defaultValue","propValue","Object","get","set","value","dispatchEvent","worldPosition","worldPositionStart","worldQuaternion","worldQuaternionStart","cameraPosition","cameraQuaternion","pointStart","pointEnd","rotationAxis","eye","_offset","_startNorm","_endNorm","_cameraScale","_parentPosition","_parentQuaternion","_parentQuaternionInv","_parentScale","_worldScaleStart","_worldQuaternionInv","_worldScale","_positionStart","_quaternionStart","_scaleStart","_getPointer","$b9499708d6cce9b7$var$getPointer","bind","_onPointerDown","$b9499708d6cce9b7$var$onPointerDown","_onPointerHover","$b9499708d6cce9b7$var$onPointerHover","_onPointerMove","$b9499708d6cce9b7$var$onPointerMove","_onPointerUp","$b9499708d6cce9b7$var$onPointerUp","addEventListener","updateMatrixWorld","object","parent","error","matrixWorld","decompose","copy","invert","isOrthographicCamera","getWorldDirection","negate","sub","normalize","pointerHover","pointer","dragging","setFromCamera","intersect","$b9499708d6cce9b7$var$intersectObjectWithRay","picker","axis","name","pointerDown","button","planeIntersect","position","quaternion","scale","point","pointerMove","space","applyQuaternion","indexOf","x","y","z","divide","translationSnap","search","Math","round","setFromMatrixPosition","d","length","dot","multiply","scaleSnap","ROTATION_SPEED","distanceTo","rotationAngle","angleTo","cross","rotationSnap","setFromAxisAngle","pointerUp","dispose","removeEventListener","traverse","child","geometry","material","attach","detach","reset","enabled","getRaycaster","getMode","setMode","setTranslationSnap","setRotationSnap","setScaleSnap","setSize","size","setSpace","event","ownerDocument","pointerLockElement","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","pointerType","setPointerCapture","pointerId","releasePointerCapture","raycaster","includeInvisible","allIntersections","intersectObject","i","$b9499708d6cce9b7$var$_tempEuler","Euler","$b9499708d6cce9b7$var$_alignVector","$b9499708d6cce9b7$var$_zeroVector","$b9499708d6cce9b7$var$_lookAtMatrix","Matrix4","$b9499708d6cce9b7$var$_tempQuaternion2","$b9499708d6cce9b7$var$_identityQuaternion","$b9499708d6cce9b7$var$_dirVector","$b9499708d6cce9b7$var$_tempMatrix","$b9499708d6cce9b7$var$_unitX","$b9499708d6cce9b7$var$_unitY","$b9499708d6cce9b7$var$_unitZ","$b9499708d6cce9b7$var$_v1","$b9499708d6cce9b7$var$_v2","$b9499708d6cce9b7$var$_v3","isTransformControlsGizmo","gizmoMaterial","MeshBasicMaterial","depthTest","depthWrite","fog","toneMapped","transparent","gizmoLineMaterial","LineBasicMaterial","matInvisible","clone","opacity","matHelper","matRed","color","setHex","matGreen","matBlue","matRedTransparent","matGreenTransparent","matBlueTransparent","matWhiteTransparent","matYellowTransparent","matGray","arrowGeometry","CylinderGeometry","translate","scaleHandleGeometry","BoxGeometry","lineGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","lineGeometry2","CircleGeometry","radius","arc","TorusGeometry","PI","rotateY","rotateX","gizmoTranslate","Mesh","XYZ","OctahedronGeometry","XY","YZ","XZ","pickerTranslate","helperTranslate","START","END","DELTA","Line","TranslateHelperGeometry","gizmoRotate","XYZE","E","helperRotate","AXIS","pickerRotate","SphereGeometry","gizmoScale","pickerScale","helperScale","setupGizmo","gizmoMap","gizmo","rotation","tag","updateMatrix","tempGeometry","applyMatrix4","matrix","renderOrder","Infinity","helper","force","handles","concat","children","handle","factor","bottom","zoom","min","tan","fov","multiplyScalar","AXIS_HIDE_THRESHOLD","PLANE_HIDE_THRESHOLD","abs","setFromRotationMatrix","lookAt","atan2","multiplyQuaternions","showX","showY","showZ","_color","_opacity","split","some","a","setFromEuler","PlaneGeometry","wireframe","side","DoubleSide","isTransformControlsPlane","$4284a2db5f44d47f$export$81440a44bb6c49c9","mesh","orientation","vertices","normals","uvs","plane1","projectorMatrix","makeRotationFromEuler","setPosition","projectorMatrixInverse","pushDecalVertex","decalVertices","vertex","normal","transformDirection","push","$4284a2db5f44d47f$export$4daa3f975b18a790","clipGeometry","inVertices","plane","outVertices","s","nV1","nV2","nV3","nV4","total","v1Out","v2Out","v3Out","clip","v0","v1","p","d0","s0","positionAttribute","attributes","normalAttribute","index","count","fromBufferAttribute","getX","i1","decalVertex","generate","window","logTriangleDefinitions","$4CEV9","$93821b8270b9c561$var$params","brush1Shape","brush1Complexity","brush1Color","brush2Shape","brush2Complexity","brush2Color","operation","SUBTRACTION","displayBrushes","displayControls","shadows","vertexColors","flatShading","gridTexture","useGroups","enableDebugTelemetry","displayIntersectionEdges","displayTriangleIntersections","displayBrush1BVH","displayBrush2BVH","minScale","maxScale","rotate","clear","$93821b8270b9c561$var$decals","forEach","$93821b8270b9c561$var$decalMesh","remove","$93821b8270b9c561$var$renderer","$93821b8270b9c561$var$camera","$93821b8270b9c561$var$scene","$93821b8270b9c561$var$gui","$93821b8270b9c561$var$outputContainer","$93821b8270b9c561$var$controls","$93821b8270b9c561$var$transformControls","$93821b8270b9c561$var$brush1","$93821b8270b9c561$var$brush2","$93821b8270b9c561$var$resultObject","$93821b8270b9c561$var$wireframeResult","$93821b8270b9c561$var$light","$93821b8270b9c561$var$originalMaterial","$93821b8270b9c561$var$edgesHelper","$93821b8270b9c561$var$trisHelper","$93821b8270b9c561$var$bvhHelper1","$93821b8270b9c561$var$bvhHelper2","$93821b8270b9c561$var$csgEvaluator","$93821b8270b9c561$var$hipGLTF","$93821b8270b9c561$var$femurGLTF","$93821b8270b9c561$var$hipMesh","$93821b8270b9c561$var$femurMesh","$93821b8270b9c561$var$needsUpdate","$93821b8270b9c561$var$materialMap","Map","$93821b8270b9c561$var$raycaster","$93821b8270b9c561$var$line","$93821b8270b9c561$var$intersection","intersects","$93821b8270b9c561$var$mouse","Vector2","$93821b8270b9c561$var$intersects","$93821b8270b9c561$var$textureLoader","TextureLoader","$93821b8270b9c561$var$decalDiffuse","load","colorSpace","SRGBColorSpace","$93821b8270b9c561$var$decalNormal","$93821b8270b9c561$var$decalMaterial","MeshPhongMaterial","specular","map","normalMap","normalScale","shininess","polygonOffset","polygonOffsetFactor","$93821b8270b9c561$var$mouseHelper","$93821b8270b9c561$var$position","$93821b8270b9c561$var$orientation","$93821b8270b9c561$var$size","$93821b8270b9c561$var$updateBrush","brush","complexity","MathUtils","lerp","dim","TorusKnotGeometry","toNonIndexed","position1","array","Float32Array","l","BufferAttribute","prepareGeometry","$93821b8270b9c561$var$render","requestAnimationFrame","startTime","performance","now","debug","evaluate","m","deltaTime","innerText","toFixed","setEdges","intersectionEdges","setTriangles","triangleIntersectsA","getTrianglesAsArray","getIntersectionsAsArray","castShadow","$93821b8270b9c561$var$checkIntersection","innerWidth","innerHeight","normalMatrix","Matrix3","getNormalMatrix","n","face","applyNormalMatrix","positions","setXYZ","needsUpdate","$93821b8270b9c561$var$onWindowResize","aspect","updateProjectionMatrix","$93821b8270b9c561$var$animate","render","async","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setAnimationLoop","setClearColor","shadowMap","PCFSoftShadowMap","body","appendChild","Scene","DirectionalLight","target","AmbientLight","shadowCam","shadow","mat","mapSize","setScalar","bias","normalBias","right","PerspectiveCamera","far","$5Rd1x","OrbitControls","e","Evaluator","Brush","GridMaterial","polygonOffsetUnits","premultipliedAlpha","roughness","receiveShadow","FrontSide","m1","m2","enableGrid","MeshStandardMaterial","EdgesHelper","TriangleSetHelper","$8Zfx2","MeshBVHVisualizer","update","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","scene","computeVertexNormals","$jiuw3","GUI","ADDITION","REVERSE_SUBTRACTION","INTERSECTION","DIFFERENCE","HOLLOW_INTERSECTION","HOLLOW_SUBTRACTION","onChange","v","brush1Folder","addFolder","addColor","brush2Folder","debugFolder","code","setFromPoints","gltf","$93821b8270b9c561$var$loadSourceMesh","MeshNormalMaterial","moved","onPointerMove","isPrimary","random","$93821b8270b9c561$var$addDecal","$93821b8270b9c561$var$initDecal","$93821b8270b9c561$var$init"],"version":3,"file":"simple.fddf0cf1.js.map"}